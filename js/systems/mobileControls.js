/**
 * ÊâãÊ©üÊéßÂà∂Á≥ªÁµ± - ÂñÆÂÄãÁûÑÊ∫ñÊâãÊääÁâàÊú¨
 * Â∞àÁÇ∫Â°îÈò≤ÈÅäÊà≤Ë®≠Ë®àÔºöÂõ∫ÂÆö‰ΩçÁΩÆÁöÑÁûÑÊ∫ñÊâãÊää
 */
class MobileControls {
    constructor() {
        this.isEnabled = false;
        this.aimDpad = null;
        
        // ÁûÑÊ∫ñÊñπÂêë
        this.attackDirection = { x: 0, y: 0 };
        
        this.createControls();
        this.detectMobile();
        
        console.log('üì± MobileControls (ÁûÑÊ∫ñÊâãÊääÁâà) ÂàùÂßãÂåñÂÆåÊàê');
    }
    
    // Ê™¢Ê∏¨ÊòØÂê¶ÁÇ∫ÊâãÊ©üË®≠ÂÇô
    detectMobile() {
        const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
                         ('ontouchstart' in window) ||
                         (navigator.maxTouchPoints > 0) ||
                         (window.innerWidth <= 768);
        
        if (isMobile) {
            this.enable();
        } else {
            this.disable();
        }
        
        console.log(`üì± Ë®≠ÂÇôÊ™¢Ê∏¨: ${isMobile ? 'ÊâãÊ©ü - È°ØÁ§∫ÁûÑÊ∫ñÊâãÊää' : 'Ê°åÈù¢ - Èö±ËóèÁûÑÊ∫ñÊâãÊää'}`);
    }
    
    // ÂâµÂª∫ÊéßÂà∂ÁïåÈù¢
    createControls() {
        // ÂâµÂª∫ÁûÑÊ∫ñÊâãÊää (ÂàùÂßãÈö±ËóèÔºåËß∏Á¢∞ÊôÇÈ°ØÁ§∫)
        this.aimDpad = this.createAimPad();
        document.body.appendChild(this.aimDpad);
        this.setupScreenTouchEvents();
    }
    
    // ÂâµÂª∫ÁûÑÊ∫ñÊâãÊää
    createAimPad() {
        const dpad = document.createElement('div');
        dpad.id = 'aimpad';
        dpad.className = 'mobile-aimpad';
        dpad.innerHTML = `
            <style>
            .mobile-aimpad {
                position: fixed;
                width: 120px;
                height: 120px;
                opacity: 0;
                pointer-events: none;
                z-index: 1000;
                transition: opacity 0.2s;
            }
            .mobile-aimpad.visible {
                opacity: 0.8;
                pointer-events: auto;
            }
            .mobile-aimpad.active {
                opacity: 0.9;
            }
            .mobile-aimpad.controlling .joystick-bg {
                border-color: #ff00ff;
                box-shadow: 0 0 25px rgba(255, 0, 255, 0.5);
            }
            .mobile-aimpad.controlling .joystick-knob {
                background: #ff00ff;
                box-shadow: 0 0 20px rgba(255, 0, 255, 1);
            }
            .aim-label {
                position: absolute;
                top: -25px;
                left: 50%;
                transform: translateX(-50%);
                color: #00ffff;
                font-size: 12px;
                text-shadow: 0 0 10px #00ffff;
                pointer-events: none;
                font-family: 'Courier New', monospace;
            }
            .joystick-container {
                width: 100%;
                height: 100%;
                position: relative;
            }
            .joystick-bg {
                width: 90px;
                height: 90px;
                border: 2px solid #00ffff;
                border-radius: 50%;
                background: rgba(0, 255, 255, 0.1);
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                box-shadow: 0 0 20px rgba(0, 255, 255, 0.3);
            }
            .joystick-knob {
                width: 30px;
                height: 30px;
                background: #00ffff;
                border-radius: 50%;
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                box-shadow: 0 0 15px rgba(0, 255, 255, 0.8);
                transition: none;
            }
            </style>
            <div class="aim-label">ÁûÑÊ∫ñ</div>
            <div class="joystick-container">
                <div class="joystick-bg">
                    <div class="joystick-knob"></div>
                </div>
            </div>
        `;
        return dpad;
    }
    
    // Ë®≠ÁΩÆËû¢ÂπïËß∏Êéß‰∫ã‰ª∂ - Ëß∏Á¢∞È°ØÁ§∫ÊâãÊää
    setupScreenTouchEvents() {
        let isActive = false;
        let touchId = null;
        let centerPos = { x: 0, y: 0 };
        const maxRadius = 45;
        
        const knob = this.aimDpad.querySelector('.joystick-knob');
        
        // Ëß∏ÊéßÈñãÂßã - Âú®Ëß∏Á¢∞‰ΩçÁΩÆÈ°ØÁ§∫ÊâãÊää
        document.addEventListener('touchstart', (event) => {
            if (!this.isEnabled || isActive) return;
            
            const touch = event.touches[0];
            
            // Ê™¢Êü•ÊòØÂê¶Ëß∏Á¢∞Âà∞UIÂÖÉÁ¥†ÔºåÂ¶ÇÊûúÊòØÂâá‰∏çÈ°ØÁ§∫ÊêñÊ°ø
            if (this.isTouchingUI(event.target)) {
                console.log('üö´ Ëß∏Á¢∞Âà∞UIÂÖÉÁ¥†Ôºå‰∏çÈ°ØÁ§∫ÊêñÊ°ø:', event.target);
                return;
            }
            touchId = touch.identifier;
            isActive = true;
            
            // Ë®≠ÁΩÆÊâãÊää‰ΩçÁΩÆÂú®Ëß∏Á¢∞Èªû
            const dpadSize = 120;
            const x = Math.max(dpadSize/2, Math.min(window.innerWidth - dpadSize/2, touch.clientX));
            const y = Math.max(dpadSize/2, Math.min(window.innerHeight - dpadSize/2, touch.clientY));
            
            this.aimDpad.style.left = (x - dpadSize/2) + 'px';
            this.aimDpad.style.top = (y - dpadSize/2) + 'px';
            
            // Ë®òÈåÑ‰∏≠ÂøÉ‰ΩçÁΩÆ
            centerPos.x = touch.clientX;
            centerPos.y = touch.clientY;
            
            // È°ØÁ§∫ÊâãÊääÔºà‰ΩÜ‰∏çÁ´ãÂç≥ÊîπËÆäÊîªÊìäÊñπÂêëÔºâ
            this.aimDpad.classList.add('visible');
            // ‰∏çÂú®ÈÄôË£°ÂëºÂè´ updateAimDirectionÔºåÂõ†ÁÇ∫Âè™ÊòØÈ°ØÁ§∫ÊâãÊää
            
            event.preventDefault();
        });
        
        // Ëß∏ÊéßÁßªÂãï - Âè™ÊúâÂú®ÊâãÊääÁØÑÂúçÂÖßÊâçÊéßÂà∂ÁûÑÊ∫ñÊñπÂêë
        document.addEventListener('touchmove', (event) => {
            if (!isActive) return;
            
            // ÊâæÂà∞Â∞çÊáâÁöÑËß∏ÊéßÈªû
            let currentTouch = null;
            for (let i = 0; i < event.touches.length; i++) {
                if (event.touches[i].identifier === touchId) {
                    currentTouch = event.touches[i];
                    break;
                }
            }
            
            if (currentTouch) {
                // Ê™¢Êü•ÊòØÂê¶Âú®ÊâãÊääÊúâÊïàÊéßÂà∂ÁØÑÂúçÂÖß
                const deltaX = currentTouch.clientX - centerPos.x;
                const deltaY = currentTouch.clientY - centerPos.y;
                const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
                
                // Âè™ÊúâÁï∂ÁßªÂãïË∑ùÈõ¢Ë∂ÖÈÅéÈñæÂÄºÊôÇÊâçÈñãÂßãÊéßÂà∂
                if (distance > 15) { // 15px ÁöÑÂïüÂãïÈñæÂÄº
                    this.aimDpad.classList.add('active');
                    this.updateAimDirection(currentTouch.clientX, currentTouch.clientY, centerPos, knob, maxRadius);
                } else {
                    // Âú®Ê≠ªÂçÄÂÖßÔºå‰∏çÊéßÂà∂ÊñπÂêë
                    this.aimDpad.classList.remove('active', 'controlling');
                    this.attackDirection = { x: 0, y: 0 };
                }
            }
            
            event.preventDefault();
        });
        
        // Ëß∏ÊéßÁµêÊùü - Èö±ËóèÊâãÊää
        const handleTouchEnd = (event) => {
            if (!isActive) return;
            
            // Ê™¢Êü•ÊòØÂê¶ÁÇ∫Â∞çÊáâÁöÑËß∏ÊéßÈªû
            for (let i = 0; i < event.changedTouches.length; i++) {
                if (event.changedTouches[i].identifier === touchId) {
                    isActive = false;
                    touchId = null;
                    
                    // Èö±ËóèÊâãÊää
                    this.aimDpad.classList.remove('visible', 'active', 'controlling');
                    knob.style.transform = 'translate(-50%, -50%)';
                    this.attackDirection = { x: 0, y: 0 };
                    
                    event.preventDefault();
                    break;
                }
            }
        };
        
        document.addEventListener('touchend', handleTouchEnd);
        document.addEventListener('touchcancel', handleTouchEnd);
    }
    
    // Ê™¢Êü•ÊòØÂê¶Ëß∏Á¢∞Âà∞UIÂÖÉÁ¥†
    isTouchingUI(target) {
        if (!target) return false;
        
        // Ê™¢Êü•Â∏∏Ë¶ãÁöÑUIÂÖÉÁ¥†
        const uiSelectors = [
            '#ui',                    // ‰∏ªUIÈù¢Êùø
            '.ui-panel',             // UIÈù¢Êùø
            '.stats',                // Áµ±Ë®àÈù¢Êùø
            '.restart-button',       // ÈáçÂïüÊåâÈàï
            '#gameOver',            // ÈÅäÊà≤ÁµêÊùüÁï´Èù¢
            '.upgrade-option',       // ÂçáÁ¥öÈÅ∏È†Ö
            '.upgrade-panel',        // ÂçáÁ¥öÈù¢Êùø
            'button',               // ÊâÄÊúâÊåâÈàï
            'input',                // Ëº∏ÂÖ•Ê°Ü
            'select',               // ‰∏ãÊãâÈÅ∏ÂñÆ
            '[data-ui]',            // Ê®ôË®òÁÇ∫UIÁöÑÂÖÉÁ¥†
            '.mobile-aimpad'        // Èò≤Ê≠¢ÊâãÊääËß∏ÁôºËá™Â∑±
        ];
        
        // Ê™¢Êü•ÁõÆÊ®ôÂÖÉÁ¥†ÊàñÂÖ∂Áà∂ÂÖÉÁ¥†ÊòØÂê¶ÁÇ∫UI
        let element = target;
        while (element && element !== document.body) {
            // Ê™¢Êü•IDÊàñclass
            for (const selector of uiSelectors) {
                if (element.matches && element.matches(selector)) {
                    return true;
                }
            }
            
            // Ê™¢Êü•ÊòØÂê¶ÊúâUIÁõ∏ÈóúÁöÑclassÊàñÂ±¨ÊÄß
            if (element.classList) {
                if (element.classList.contains('ui') || 
                    element.classList.contains('menu') ||
                    element.classList.contains('panel') ||
                    element.classList.contains('overlay')) {
                    return true;
                }
            }
            
            element = element.parentElement;
        }
        
        return false;
    }
    
    // Êõ¥Êñ∞ÁûÑÊ∫ñÊñπÂêë
    updateAimDirection(clientX, clientY, startPos, knob, maxRadius) {
        const deltaX = clientX - startPos.x;
        const deltaY = clientY - startPos.y;
        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        
        const clampedDistance = Math.min(distance, maxRadius);
        const angle = Math.atan2(deltaY, deltaX);
        
        const knobX = Math.cos(angle) * clampedDistance;
        const knobY = Math.sin(angle) * clampedDistance;
        
        knob.style.transform = `translate(${knobX - 15}px, ${knobY - 15}px)`;
        
        // Ë®àÁÆóÊ®ôÊ∫ñÂåñÁûÑÊ∫ñÊñπÂêë
        const normalizedX = clampedDistance > 10 ? knobX / maxRadius : 0;
        const normalizedY = clampedDistance > 10 ? knobY / maxRadius : 0;
        
        this.attackDirection = { x: normalizedX, y: normalizedY };
        
        if (clampedDistance > 10) {
            this.aimDpad.classList.add('controlling');
        } else {
            this.aimDpad.classList.remove('controlling');
        }
    }
    
    // ÂïüÁî®ÊâãÊ©üÊéßÂà∂
    enable() {
        this.isEnabled = true;
        console.log('üì± Ëß∏Á¢∞È°ØÁ§∫ÁûÑÊ∫ñÊâãÊääÂ∑≤ÂïüÁî®');
    }
    
    // Á¶ÅÁî®ÊâãÊ©üÊéßÂà∂
    disable() {
        this.isEnabled = false;
        if (this.aimDpad) {
            this.aimDpad.classList.remove('visible', 'active', 'controlling');
        }
        this.attackDirection = { x: 0, y: 0 };
        console.log('üì± Ëß∏Á¢∞È°ØÁ§∫ÁûÑÊ∫ñÊâãÊääÂ∑≤Á¶ÅÁî®');
    }
    
    // Áç≤ÂèñÊîªÊìäÊñπÂêë
    getAttackDirection() {
        if (!this.isEnabled) return null;
        if (this.attackDirection.x === 0 && this.attackDirection.y === 0) return null;
        return { x: this.attackDirection.x, y: this.attackDirection.y };
    }
    
    // ÊòØÂê¶Ê≠£Âú®ÁûÑÊ∫ñ
    isAttacking() {
        return this.isEnabled && (this.attackDirection.x !== 0 || this.attackDirection.y !== 0);
    }
    
    // Áõ∏ÂÆπÊÄßÊñπÊ≥ïÔºàÈÅäÊà≤‰ª£Á¢ºÂèØËÉΩÊúÉË™øÁî®Ôºâ
    getMovementInput() {
        return { x: 0, y: 0 }; // Â°îÈò≤ÈÅäÊà≤‰∏çÈúÄË¶ÅÁßªÂãï
    }
}

// ÂâµÂª∫ÂÖ®ÂüüÊâãÊ©üÊéßÂà∂Âô®
const mobileControls = new MobileControls();
window.mobileControls = mobileControls;